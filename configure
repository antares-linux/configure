#!/bin/sh

# prevent printf from interpreting dashes as options
alias printf="printf --"

# print help message
print_help() {
    # main
    printf "Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE. See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
  -q, --quiet, --silent   do not print \`checking ...' messages
  -n, --no-create         do not create output files
      --builddir=DIR      configure for building in DIR [\$PWD]
      --srcdir=DIR        access sources in DIR [detected]
      --sysroot=SYSROOT   use SYSROOT as the system root during the build
      --cfgfile=FILE      write the generated configuration to FILE [config.mk]

Installation directories:
  --prefix=PREFIX         main installation prefix [/usr/local]
  --exec-prefix=EPREFIX   installation prefix for executable files [PREFIX]

By default, \`make install' will install all the files in
\`/usr/local/bin', \`/usr/local/lib' etc. You can specify
an installation prefix other than \`/usr/local' using \`--prefix',
for instance \`--prefix=\$HOME/.local'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [SYSROOT/etc]
  --localstatedir=DIR     modifiable single-machine data [SYSROOT/var]
  --includedir=DIR        C header files [PREFIX/include]
  --datadir=DIR           read-only architecture-independent data [PREFIX/share]
  --infodir=DIR           info documentation [DATADIR/info]
  --mandir=DIR            man documentation [DATADIR/man]

Optional features:
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-static-bin     build static binaries [disabled]

Optional packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pkgversion=STR   use STR as the package version string

System types:
  --build=BUILD           configure for building on BUILD [none]
  --target=TARGET         cross-compile programs to run on TARGET [BUILD]
  --host=HOST             same as --target

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  AR          archiver command
  AS          assembler command
  DSYMUTIL    dsymutil command
  LD          linker command
  NM          nm command
  RANLIB      ranlib command
  STRIP       strip command
  OBJCOPY     objcopy command
  OBJDUMP     objdump command
  READELF     readelf command
  CROSS_COMPILE
              cross compiler target prefix with trailing dash; for example,
              \`x86_64-pc-linux-gnu-' or \`armv7l-linux-musleabihf-'
  DESTDIR     destination for install (post-build counterpart to \`sysroot')

Use these variables to override the choices made by \`configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.\n" >&2

    # exit no error
    exit 0
}

# printing
println() { printf "%s\n" "$*" >&2; }
error() { printf "$0: error: %s\n" "$*" >&2; exit ${2:-1}; }

# try compiler names
try_cmd() { eval "test -z \"\$$1\"" && command -v "$2" >/dev/null 2>&1 && eval "$1=\"$2\""; }

# check a preprocessor condition
try_cpp_condition() {
    printf "checking preprocessor condition %s... " "$1"
    printf "typedef int x;\n#if $1\n#error yes\n#endif\n" > "$tmpc"
    shift
    "$CC" "$@" -c -o /dev/null "$tmpc" >/dev/null 2>&1 && printf "false\n" && return 1
    printf "true\n"
    return 0
}

# try headers
# todo: use CPPFLAGS, cpp, resolve paths only
try_header() {
    printf "checking for %s... " "$1"
    printf "#include <$1>\n" > "$tmpc"
    "$CC" -E $CPPFLAGS $CPPFLAGS_TRY -c -o /dev/null "$tmpc" >/dev/null 2>&1 && printf "yes\n" && return 0
    printf "no\n"
    return 1
}

# format a variable string for make
fmt_var() {
    eval "printf \"$1 =\${$1:+ \$$1}\""
    #eval "test -n \"\$$1\"" && eval "printf \"$1 = \$$1\"" && return
    #eval "printf \"#$1 =\""
}


# beginning of script
# ------------------------------------------------------------------------------

# if no path is provided, assume ./
[ "$0" = "${0%%/*}" ] && P0="./$0"; : ${P0:=$0}

# parse an argument
while [ "$#" -gt 0 ]; do
    # k/v pair
    opt="${1%%=*}"
    val="${1##${opt}=}"
    case "$1" in
        -o)
            config_file="$2"; shift 2 ;;
        -o*)
            config_file="${1##-o}"; shift ;;
        --help)
            print_help ;;
        --quiet|--silent|-q)
            silent="yes" ;;
        --no-create|-n)
            write_config="no" ;;
        --cfgfile=*)
            config="${1##--cfgfile=}" ;;
        --sysroot=*)
            sysroot="${1##--sysroot=}" ;;
        --prefix=*)
            prefix="${1##--prefix=}" ;;
        --exec-prefix=*)
            exec_prefix="${1##--exec-prefix=}" ;;
        --builddir=*)
            builddir="${1##--builddir=}" ;;
        --srcdir=*)
            srcdir="${1##--srcdir=}" ;;
        --bindir=*)
            bindir="${1##--bindir=}" ;;
        --sbindir=*)
            sbindir="${1##--sbindir=}" ;;
        --libdir=*)
            libdir="${1##--libdir=}" ;;
        --libexecdir=*)
            libexecdir="${1##--libexecdir=}" ;;
        --sysconfdir=*)
            sysconfdir="${1##--sysconfdir=}" ;;
        --localstatedir=*)
            localstatedir="${1##--localstatedir=}" ;;
        --includedir=*)
            includedir="${1##--includedir=}" ;;
        --datadir=*)
            datadir="${1##--datadir=}" ;;
        --infodir=*)
            infodir="${1##--infodir=}" ;;
        --mandir=*)
            mandir="${1##--mandir=}" ;;
        --build=*)
            build="${1##--build=}" ;;
        --target=*)
            target="${1##--target=}" ;;
        --host=*)
            target="${1##--host=}" ;;
        --enable-static-bin)
            static_bin="yes" ;;
        -*=*|-*)
            printf "warning: unknown option ${1%%=*}\n" >&2 ;;
        *=*)
            eval "$opt='$val'" ;;
    esac
    shift
done

# set variables: these should be compatible with both `sh` and `make`
: "${sysroot:=}"
: "${prefix:=/usr/local}"
: "${exec_prefix:=\$(prefix)}"
: "${bindir:=$exec_prefix/bin}"
: "${sbindir:=$exec_prefix/sbin}"
: "${libdir:=$exec_prefix/lib}"
: "${libexecdir:=$exec_prefix/libexec}"
: "${sysconfdir:=\$(sysroot)/etc}"
: "${localstatedir:=\$(sysroot)/var}"
: "${includedir:=\$(prefix)/include}"
: "${datadir:=\$(prefix)/share}"
: "${infodir:=\$(datadir)/info}"
: "${mandir:=\$(datadir)/man}"
: "${builddir:=$PWD}"
: "${srcdir:=$(cd "${P0%/*}";printf "$PWD";cd - >/dev/null)}"
: "${config:=$builddir/config.mk}" > "$config"
: "${static_bin:=no}"
: "${target:=${CROSS_COMPILE%-}}"
: "${CROSS_COMPILE:=${target:+${target}-}}"

# used for various tests
tmpc="./conf$$-$PPID-$i.c"

# remove tmpc on exit
trap 'rm -f "$tmpc"' EXIT INT QUIT TERM HUP KILL

# find a C compiler
printf "checking for C compiler... "
try_cmd CC "${CROSS_COMPILE}gcc"
try_cmd CC "${CROSS_COMPILE}c99"
try_cmd CC "${CROSS_COMPILE}cc"
try_cmd CC "${CROSS_COMPILE}tcc"
try_cmd CC "${CROSS_COMPILE}qcc"
try_cmd CC "${CROSS_COMPILE}pcc"
printf "%s\n" "${CC:-not found}"
test -n "$CC" || error "cannot find a C compiler"

# find a linker
printf "checking for linker... "
try_cmd LD "${CROSS_COMPILE}ld"
try_cmd LD "${CROSS_COMPILE}ld.bfd"
try_cmd LD "${CROSS_COMPILE}ld.gold"
try_cmd LD "${CROSS_COMPILE}gold"
try_cmd LD "${CROSS_COMPILE}lld"
try_cmd LD "${CROSS_COMPILE}mold"
printf "%s\n" "${LD:-not found}"
test -n "$LD" || printf "warning: no linker found\n" # not always needed

# find an archiver
printf "checking for archiver... "
try_cmd AR "${CROSS_COMPILE}ar"
try_cmd AR "${CROSS_COMPILE}llvm-ar"
try_cmd AR "${CROSS_COMPILE}gcc-ar"
printf "%s\n" "${AR:-not found}"
test -n "$AR" || printf "warning: no archiver found\n" # not always needed

# check if it works
printf "checking whether C compiler works... "
printf "typedef int x;" > "$tmpc"
cc_output="$("$CC" $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" 2>&1)" || {
    printf "no; compiler output follows:\n%s\n" "$output"
    exit 1
}
printf "yes\n"


# write to the config file
printf "\
$(fmt_var sysroot)
$(fmt_var prefix)
$(fmt_var exec_prefix)
$(fmt_var bindir)
$(fmt_var sbindir)
$(fmt_var libdir)
$(fmt_var libexecdir)
$(fmt_var sysconfdir)
$(fmt_var localstatedir)
$(fmt_var includedir)
$(fmt_var datadir)
$(fmt_var infodir)
$(fmt_var mandir)
$(fmt_var builddir)
$(fmt_var srcdir)

$(fmt_var build)
$(fmt_var target)
$(fmt_var static_bin)
$(fmt_var CC)
$(fmt_var LD)
$(fmt_var AR)
" >> "$config"

# if it's a makefile, include the one in srcdir
[ "$builddir" != "$srcdir" ] && printf "include config.mk\n\ninclude \$(srcdir)/Makefile" >> "$builddir/Makefile"
